================================================================================
Scoped blocks
================================================================================

x = 0
do
  local x = 1
  do
    local x = 2
  end
end

---

(chunk
  (variable_assignment
    (variable_list
      (variable
        name: (identifier)))
    (expression_list
      value: (number)))
  (do_statement
    body: (block
      (scoped_variable_declaration
        (variable_list
          (variable
            name: (identifier)))
        (expression_list
          value: (number)))
      (do_statement
        body: (block
          (scoped_variable_declaration
            (variable_list
              (variable
                name: (identifier)))
            (expression_list
              value: (number))))))))

================================================================================
If conditionals
================================================================================

n = 10

if n == 10 then
  print("Value is 10")
end

if n > 10 then
  print("Bigger than 10")
else
  print("Smaller than 11")
end

if n > 15 then
  print("Bigger than 15")
elseif n < 5 then
  print("Smaller than 5")
else
  print("Between 5 and 15")
end

if n > 10 then end
if n > 10 then else end
if n > 15 then elseif n < 5 then end
if n > 15 then elseif n < 5 then elseif n == 10 then end

---

(chunk
  (variable_assignment
    (variable_list
      (variable
        name: (identifier)))
    (expression_list
      value: (number)))
  (if_statement
    condition: (binary_expression
      left: (variable
        name: (identifier))
      right: (number))
    consequence: (block
      (function_call
        (variable
          name: (identifier))
        arguments: (argument_list
          (expression_list
            (string))))))
  (if_statement
    condition: (binary_expression
      left: (variable
        name: (identifier))
      right: (number))
    consequence: (block
      (function_call
        (variable
          name: (identifier))
        arguments: (argument_list
          (expression_list
            (string)))))
    alternative: (else_clause
      body: (block
        (function_call
          (variable
            name: (identifier))
          arguments: (argument_list
            (expression_list
              (string)))))))
  (if_statement
    condition: (binary_expression
      left: (variable
        name: (identifier))
      right: (number))
    consequence: (block
      (function_call
        (variable
          name: (identifier))
        arguments: (argument_list
          (expression_list
            (string)))))
    alternative: (elseif_clause
      condition: (binary_expression
        left: (variable
          name: (identifier))
        right: (number))
      consequence: (block
        (function_call
          (variable
            name: (identifier))
          arguments: (argument_list
            (expression_list
              (string))))))
    alternative: (else_clause
      body: (block
        (function_call
          (variable
            name: (identifier))
          arguments: (argument_list
            (expression_list
              (string)))))))
  (if_statement
    condition: (binary_expression
      left: (variable
        name: (identifier))
      right: (number)))
  (if_statement
    condition: (binary_expression
      left: (variable
        name: (identifier))
      right: (number))
    alternative: (else_clause))
  (if_statement
    condition: (binary_expression
      left: (variable
        name: (identifier))
      right: (number))
    alternative: (elseif_clause
      condition: (binary_expression
        left: (variable
          name: (identifier))
        right: (number))))
  (if_statement
    condition: (binary_expression
      left: (variable
        name: (identifier))
      right: (number))
    alternative: (elseif_clause
      condition: (binary_expression
        left: (variable
          name: (identifier))
        right: (number)))
    alternative: (elseif_clause
      condition: (binary_expression
        left: (variable
          name: (identifier))
        right: (number)))))

================================================================================
While loop
================================================================================

n = 5
while n < 10 do
  n = n + 1
end

while n ~= 10 do end

---

(chunk
  (variable_assignment
    (variable_list
      (variable
        name: (identifier)))
    (expression_list
      value: (number)))
  (while_statement
    condition: (binary_expression
      left: (variable
        name: (identifier))
      right: (number))
    body: (block
      (variable_assignment
        (variable_list
          (variable
            name: (identifier)))
        (expression_list
          value: (binary_expression
            left: (variable
              name: (identifier))
            right: (number))))))
  (while_statement
    condition: (binary_expression
      left: (variable
        name: (identifier))
      right: (number))))

================================================================================
Repeat loop
================================================================================

n = 0
repeat
  n = n + 1
until n < 10

repeat until n ~= 10

---

(chunk
  (variable_assignment
    (variable_list
      (variable
        name: (identifier)))
    (expression_list
      value: (number)))
  (repeat_statement
    body: (block
      (variable_assignment
        (variable_list
          (variable
            name: (identifier)))
        (expression_list
          value: (binary_expression
            left: (variable
              name: (identifier))
            right: (number)))))
    condition: (binary_expression
      left: (variable
        name: (identifier))
      right: (number)))
  (repeat_statement
    condition: (binary_expression
      left: (variable
        name: (identifier))
      right: (number))))

================================================================================
Numeric for loop
================================================================================

n = 0
for i = 0, 10, 1 do
  n = i
end

for i = 0, 10 do end

---

(chunk
  (variable_assignment
    (variable_list
      (variable
        name: (identifier)))
    (expression_list
      value: (number)))
  (for_numeric_statement
    name: (identifier)
    start: (number)
    end: (number)
    step: (number)
    body: (block
      (variable_assignment
        (variable_list
          (variable
            name: (identifier)))
        (expression_list
          value: (variable
            name: (identifier))))))
  (for_numeric_statement
    name: (identifier)
    start: (number)
    end: (number)))

================================================================================
Generic for loop
================================================================================

t = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
n = 0
for i, v in ipairs(t) do
  n = n + 1
end

for i in ipairs(t) do end

---

(chunk
  (variable_assignment
    (variable_list
      (variable
        name: (identifier)))
    (expression_list
      value: (table
        (field_list
          (field
            value: (number))
          (field
            value: (number))
          (field
            value: (number))
          (field
            value: (number))
          (field
            value: (number))
          (field
            value: (number))
          (field
            value: (number))
          (field
            value: (number))
          (field
            value: (number))
          (field
            value: (number))
          (field
            value: (number))))))
  (variable_assignment
    (variable_list
      (variable
        name: (identifier)))
    (expression_list
      value: (number)))
  (for_generic_statement
    left: (variable_list
      name: (identifier)
      name: (identifier))
    right: (expression_list
      value: (function_call
        (variable
          name: (identifier))
        arguments: (argument_list
          (expression_list
            (variable
              name: (identifier))))))
    body: (block
      (variable_assignment
        (variable_list
          (variable
            name: (identifier)))
        (expression_list
          value: (binary_expression
            left: (variable
              name: (identifier))
            right: (number))))))
  (for_generic_statement
    left: (variable_list
      name: (identifier))
    right: (expression_list
      value: (function_call
        (variable
          name: (identifier))
        arguments: (argument_list
          (expression_list
            (variable
              name: (identifier))))))))

================================================================================
Loop break
================================================================================

n = 5
while true do
  n = n + 1
  if n == 10 then
    break
  end
end

---

(chunk
  (variable_assignment
    (variable_list
      (variable
        name: (identifier)))
    (expression_list
      value: (number)))
  (while_statement
    condition: (boolean)
    body: (block
      (variable_assignment
        (variable_list
          (variable
            name: (identifier)))
        (expression_list
          value: (binary_expression
            left: (variable
              name: (identifier))
            right: (number))))
      (if_statement
        condition: (binary_expression
          left: (variable
            name: (identifier))
          right: (number))
        consequence: (block
          (break_statement))))))

================================================================================
Labels
================================================================================

n = 5

:: increment_n ::
n = n + 1

if n < 10 then
  goto increment_n
end

---

(chunk
  (variable_assignment
    (variable_list
      (variable
        name: (identifier)))
    (expression_list
      value: (number)))
  (label_statement
    name: (identifier))
  (variable_assignment
    (variable_list
      (variable
        name: (identifier)))
    (expression_list
      value: (binary_expression
        left: (variable
          name: (identifier))
        right: (number))))
  (if_statement
    condition: (binary_expression
      left: (variable
        name: (identifier))
      right: (number))
    consequence: (block
      (goto_statement
        name: (identifier)))))

================================================================================
Variable assignments
================================================================================

r, g, b = nil, 0xff
x, y, z = 0.25, 0.4, 0.15

---

(chunk
  (variable_assignment
    (variable_list
      (variable
        name: (identifier))
      (variable
        name: (identifier))
      (variable
        name: (identifier)))
    (expression_list
      value: (nil)
      value: (number)))
  (variable_assignment
    (variable_list
      (variable
        name: (identifier))
      (variable
        name: (identifier))
      (variable
        name: (identifier)))
    (expression_list
      value: (number)
      value: (number)
      value: (number))))

================================================================================
Scoped variable declarations
================================================================================

local r
local b<const>, g = 0xff
local x, y, z<const> = 0.25, 0.4, 0.15

---

(chunk
  (scoped_variable_declaration
    (variable_list
      (variable
        name: (identifier))))
  (scoped_variable_declaration
    (variable_list
      (variable
        name: (identifier)
        (attribute
          name: (identifier)))
      (variable
        name: (identifier)))
    (expression_list
      value: (number)))
  (scoped_variable_declaration
    (variable_list
      (variable
        name: (identifier))
      (variable
        name: (identifier))
      (variable
        name: (identifier)
        (attribute
          name: (identifier))))
    (expression_list
      value: (number)
      value: (number)
      value: (number))))

================================================================================
Function definitions (syntactic sugar)
================================================================================

function noop() end

function _G.sum(a, b)
  return a + b
end

function _G:varargs(...)
  return self.sum(2, 2)
end

---

(chunk
  (function_definition_statement
    name: (function_identifier
      (identifier)))
  (function_definition_statement
    name: (function_identifier
      (identifier)
      (identifier))
    parameters: (parameter_list
      name: (identifier)
      name: (identifier))
    body: (block
      (return_statement
        (expression_list
          (binary_expression
            left: (variable
              name: (identifier))
            right: (variable
              name: (identifier)))))))
  (function_definition_statement
    name: (function_identifier
      (identifier)
      method: (identifier))
    parameters: (parameter_list
      (vararg_expression))
    body: (block
      (return_statement
        (expression_list
          (function_call
            (variable
              table: (variable
                name: (identifier))
              field: (identifier))
            arguments: (argument_list
              (expression_list
                (number)
                (number)))))))))

================================================================================
Scoped function definitions (syntactic sugar)
================================================================================

local function noop() end

local function sum(a, b)
  return a + b
end

local function varargs(...)
  return sum(2, 2)
end

---

(chunk
  (scoped_function_definition_statement
    name: (identifier))
  (scoped_function_definition_statement
    name: (identifier)
    parameters: (parameter_list
      name: (identifier)
      name: (identifier))
    body: (block
      (return_statement
        (expression_list
          (binary_expression
            left: (variable
              name: (identifier))
            right: (variable
              name: (identifier)))))))
  (scoped_function_definition_statement
    name: (identifier)
    parameters: (parameter_list
      (vararg_expression))
    body: (block
      (return_statement
        (expression_list
          (function_call
            (variable
              name: (identifier))
            arguments: (argument_list
              (expression_list
                (number)
                (number)))))))))

================================================================================
Function calls (as statement)
================================================================================

print()
print("hi!")
print(math.random())

---

(chunk
  (function_call
    (variable
      name: (identifier))
    arguments: (argument_list))
  (function_call
    (variable
      name: (identifier))
    arguments: (argument_list
      (expression_list
        (string))))
  (function_call
    (variable
      name: (identifier))
    arguments: (argument_list
      (expression_list
        (function_call
          (variable
            table: (variable
              name: (identifier))
            field: (identifier))
          arguments: (argument_list))))))
