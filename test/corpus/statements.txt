================================================================================
Scoped blocks
================================================================================

x = 0
do
  local x = 1
  do
    local x = 2
  end
end

---

(chunk
  (block
    (variable_assignment
      (variable_list
        (variable
          (identifier)))
      (expression_list
        (number)))
    (do_statement
      (block
        (scoped_variable_declaration
          (variable_list
            (scoped_variable
              (identifier)))
          (expression_list
            (number)))
        (do_statement
          (block
            (scoped_variable_declaration
              (variable_list
                (scoped_variable
                  (identifier)))
              (expression_list
                (number)))))))))

================================================================================
If conditionals
================================================================================

n = 10

if n == 10 then
  print("Value is 10")
end

if n > 10 then
  print("Bigger than 10")
else
  print("Smaller than 11")
end

if n > 15 then
  print("Bigger than 15")
elseif n < 5 then
  print("Smaller than 5")
else
  print("Between 5 and 15")
end

if n > 10 then end
if n > 10 then else end
if n > 15 then elseif n < 5 then end
if n > 15 then elseif n < 5 then elseif n == 10 then end

---

(chunk
  (block
    (variable_assignment
      (variable_list
        (variable
          (identifier)))
      (expression_list
        (number)))
    (if_statement
      (binary_expression
        (variable
          (identifier))
        (number))
      (block
        (function_call
          (variable
            (identifier))
          (argument_list
            (expression_list
              (string))))))
    (if_statement
      (binary_expression
        (variable
          (identifier))
        (number))
      (block
        (function_call
          (variable
            (identifier))
          (argument_list
            (expression_list
              (string)))))
      (else_clause
        (block
          (function_call
            (variable
              (identifier))
            (argument_list
              (expression_list
                (string)))))))
    (if_statement
      (binary_expression
        (variable
          (identifier))
        (number))
      (block
        (function_call
          (variable
            (identifier))
          (argument_list
            (expression_list
              (string)))))
      (elseif_clause
        (binary_expression
          (variable
            (identifier))
          (number))
        (block
          (function_call
            (variable
              (identifier))
            (argument_list
              (expression_list
                (string))))))
      (else_clause
        (block
          (function_call
            (variable
              (identifier))
            (argument_list
              (expression_list
                (string)))))))
    (if_statement
      (binary_expression
        (variable
          (identifier))
        (number)))
    (if_statement
      (binary_expression
        (variable
          (identifier))
        (number))
      (else_clause))
    (if_statement
      (binary_expression
        (variable
          (identifier))
        (number))
      (elseif_clause
        (binary_expression
          (variable
            (identifier))
          (number))))
    (if_statement
      (binary_expression
        (variable
          (identifier))
        (number))
      (elseif_clause
        (binary_expression
          (variable
            (identifier))
          (number)))
      (elseif_clause
        (binary_expression
          (variable
            (identifier))
          (number))))))

================================================================================
While loop
================================================================================

n = 5
while n < 10 do
  n = n + 1
end

while n ~= 10 do end

---

(chunk
  (block
    (variable_assignment
      (variable_list
        (variable
          (identifier)))
      (expression_list
        (number)))
    (while_statement
      (binary_expression
        (variable
          (identifier))
        (number))
      (block
        (variable_assignment
          (variable_list
            (variable
              (identifier)))
          (expression_list
            (binary_expression
              (variable
                (identifier))
              (number))))))
    (while_statement
      (binary_expression
        (variable
          (identifier))
        (number)))))

================================================================================
Repeat loop
================================================================================

n = 0
repeat
  n = n + 1
until n < 10

repeat until n ~= 10

---

(chunk
  (block
    (variable_assignment
      (variable_list
        (variable
          (identifier)))
      (expression_list
        (number)))
    (repeat_statement
      (block
        (variable_assignment
          (variable_list
            (variable
              (identifier)))
          (expression_list
            (binary_expression
              (variable
                (identifier))
              (number)))))
      (binary_expression
        (variable
          (identifier))
        (number)))
    (repeat_statement
      (binary_expression
        (variable
          (identifier))
        (number)))))

================================================================================
Numeric for loop
================================================================================

n = 0
for i = 0, 10, 1 do
  n = i
end

for i = 0, 10 do end

---

(chunk
  (block
    (variable_assignment
      (variable_list
        (variable
          (identifier)))
      (expression_list
        (number)))
    (for_numeric_statement
      (identifier)
      (number)
      (number)
      (number)
      (block
        (variable_assignment
          (variable_list
            (variable
              (identifier)))
          (expression_list
            (variable
              (identifier))))))
    (for_numeric_statement
      (identifier)
      (number)
      (number))))

================================================================================
Generic for loop
================================================================================

t = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
n = 0
for i, v in ipairs(t) do
  n = n + 1
end

for i in ipairs(t) do end

---

(chunk
  (block
    (variable_assignment
      (variable_list
        (variable
          (identifier)))
      (expression_list
        (table
          (field_list
            (field
              (number))
            (field
              (number))
            (field
              (number))
            (field
              (number))
            (field
              (number))
            (field
              (number))
            (field
              (number))
            (field
              (number))
            (field
              (number))
            (field
              (number))
            (field
              (number))))))
    (variable_assignment
      (variable_list
        (variable
          (identifier)))
      (expression_list
        (number)))
    (for_generic_statement
      (variable_list
        (identifier)
        (identifier))
      (expression_list
        (function_call
          (variable
            (identifier))
          (argument_list
            (expression_list
              (variable
                (identifier))))))
      (block
        (variable_assignment
          (variable_list
            (variable
              (identifier)))
          (expression_list
            (binary_expression
              (variable
                (identifier))
              (number))))))
    (for_generic_statement
      (variable_list
        (identifier))
      (expression_list
        (function_call
          (variable
            (identifier))
          (argument_list
            (expression_list
              (variable
                (identifier)))))))))

================================================================================
Loop break
================================================================================

n = 5
while true do
  n = n + 1
  if n == 10 then
    break
  end
end

---

(chunk
  (block
    (variable_assignment
      (variable_list
        (variable
          (identifier)))
      (expression_list
        (number)))
    (while_statement
      (boolean)
      (block
        (variable_assignment
          (variable_list
            (variable
              (identifier)))
          (expression_list
            (binary_expression
              (variable
                (identifier))
              (number))))
        (if_statement
          (binary_expression
            (variable
              (identifier))
            (number))
          (block
            (break_statement)))))))

================================================================================
Labels
================================================================================

n = 5

:: increment_n ::
n = n + 1

if n < 10 then
  goto increment_n
end

---

(chunk
  (block
    (variable_assignment
      (variable_list
        (variable
          (identifier)))
      (expression_list
        (number)))
    (label_statement
      (identifier))
    (variable_assignment
      (variable_list
        (variable
          (identifier)))
      (expression_list
        (binary_expression
          (variable
            (identifier))
          (number))))
    (if_statement
      (binary_expression
        (variable
          (identifier))
        (number))
      (block
        (goto_statement
          (identifier))))))

================================================================================
Variable assignments
================================================================================

r, g, b = nil, 0xff
x, y, z = 0.25, 0.4, 0.15

---

(chunk
  (block
    (variable_assignment
      (variable_list
        (variable
          (identifier))
        (variable
          (identifier))
        (variable
          (identifier)))
      (expression_list
        (nil)
        (number)))
    (variable_assignment
      (variable_list
        (variable
          (identifier))
        (variable
          (identifier))
        (variable
          (identifier)))
      (expression_list
        (number)
        (number)
        (number)))))

================================================================================
Scoped variable declarations
================================================================================

local r
local b<const>, g = 0xff
local x, y, z<const> = 0.25, 0.4, 0.15

---

(chunk
  (block
    (scoped_variable_declaration
      (variable_list
        (scoped_variable
          (identifier))))
    (scoped_variable_declaration
      (variable_list
        (scoped_variable
          (identifier)
          (attribute
            (identifier)))
        (scoped_variable
          (identifier)))
      (expression_list
        (number)))
    (scoped_variable_declaration
      (variable_list
        (scoped_variable
          (identifier))
        (scoped_variable
          (identifier))
        (scoped_variable
          (identifier)
          (attribute
            (identifier))))
      (expression_list
        (number)
        (number)
        (number)))))

================================================================================
Function definitions (syntactic sugar)
================================================================================

function noop() end

function _G.sum(a, b)
  return a + b
end

function _G:varargs(...)
  return self.sum(2, 2)
end

---

(chunk
  (block
    (function_definition_statement
      (function_identifier
        (identifier)))
    (function_definition_statement
      (function_identifier
        (identifier)
        (identifier))
      (parameter_list
        (identifier)
        (identifier))
      (block
        (return_statement
          (expression_list
            (binary_expression
              (variable
                (identifier))
              (variable
                (identifier)))))))
    (function_definition_statement
      (function_identifier
        (identifier)
        (identifier))
      (parameter_list
        (vararg_expression))
      (block
        (return_statement
          (expression_list
            (function_call
              (variable
                (variable
                  (identifier))
                (identifier))
              (argument_list
                (expression_list
                  (number)
                  (number))))))))))

================================================================================
Scoped function definitions (syntactic sugar)
================================================================================

local function noop() end

local function sum(a, b)
  return a + b
end

local function varargs(...)
  return sum(2, 2)
end

---

(chunk
  (block
    (scoped_function_definition_statement
      (identifier))
    (scoped_function_definition_statement
      (identifier)
      (parameter_list
        (identifier)
        (identifier))
      (block
        (return_statement
          (expression_list
            (binary_expression
              (variable
                (identifier))
              (variable
                (identifier)))))))
    (scoped_function_definition_statement
      (identifier)
      (parameter_list
        (vararg_expression))
      (block
        (return_statement
          (expression_list
            (function_call
              (variable
                (identifier))
              (argument_list
                (expression_list
                  (number)
                  (number))))))))))

================================================================================
Function calls (as statement)
================================================================================

print()
print("hi!")
print(math.random())

---

(chunk
  (block
    (function_call
      (variable
        (identifier))
      (argument_list))
    (function_call
      (variable
        (identifier))
      (argument_list
        (expression_list
          (string))))
    (function_call
      (variable
        (identifier))
      (argument_list
        (expression_list
          (function_call
            (variable
              (variable
                (identifier))
              (identifier))
            (argument_list)))))))
