================================================================================
Booleans and nil
================================================================================

return (undefined_var == nil) == true and true or false

---

(chunk
  (block
    (return_statement
      (expression_list
        (binary_expression
          (binary_expression
            (binary_expression
              (parenthesized_expression
                (binary_expression
                  (variable
                    (identifier))
                  (nil)))
              (boolean))
            (boolean))
          (boolean))))))

================================================================================
Numbers
================================================================================

return

3,
-3.,
3.141593,
314.1593e-2,
.3141593E1,

0xff,
-0x.BEBADA,
0x0.1E,
0xA23p-4,
0X1.921FB54442D18P+1

---

(chunk
  (block
    (return_statement
      (expression_list
        (number)
        (number)
        (number)
        (number)
        (number)
        (number)
        (number)
        (number)
        (number)
        (number)))))

================================================================================
Short strings
================================================================================

return

'',
"",
'a single-quoted (\') string',
"a double-quoted (\") string",
"a string with an undetectable -- comment inside it",
"a string with an undetectable --[[ comment ]] inside it",
"a string with an undetectable --[==[ comment ]==] inside it"

---

(chunk
  (block
    (return_statement
      (expression_list
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)
        (string)))))

================================================================================
Long strings
================================================================================

return

[[
a string
]],

[=[
a string with an undetectable
-- comment inside it
] =]]=],

[==[
a string with an undetectable
--[[ comment ]] and
[[ string ]] inside it
]= ]]==],

[====[
a string with an undetectable
--[==[ comment ]==] and
[[ string ]] inside it
] ====]]====]

---

(chunk
  (block
    (return_statement
      (expression_list
        (string)
        (string)
        (string)
        (string)))))

================================================================================
Unary expressions
================================================================================

return not (-#{} < 0)

---

(chunk
  (block
    (return_statement
      (expression_list
        (unary_expression
          (parenthesized_expression
            (binary_expression
              (unary_expression
                (unary_expression
                  (table)))
              (number))))))))

================================================================================
Binary expressions
================================================================================

return

(8^2 + 6^2)^.5,
math.pi * (8 / 2),
true and 1 or 0

---

(chunk
  (block
    (return_statement
      (expression_list
        (binary_expression
          (parenthesized_expression
            (binary_expression
              (binary_expression
                (number)
                (number))
              (binary_expression
                (number)
                (number))))
          (number))
        (binary_expression
          (variable
            (variable
              (identifier))
            (identifier))
          (parenthesized_expression
            (binary_expression
              (number)
              (number))))
        (binary_expression
          (binary_expression
            (boolean)
            (number))
          (number))))))

================================================================================
Tables
================================================================================

return {
  [math.pi] = _VERSION;
  "x",
  "y";
  x = 1,
  string.len(_VERSION),
  [30] = 23;
  {};
  45
}

---

(chunk
  (block
    (return_statement
      (expression_list
        (table
          (field_list
            (field
              (variable
                (variable
                  (identifier))
                (identifier))
              (variable
                (identifier)))
            (field
              (string))
            (field
              (string))
            (field
              (identifier)
              (number))
            (field
              (function_call
                (variable
                  (variable
                    (identifier))
                  (identifier))
                (argument_list
                  (expression_list
                    (variable
                      (identifier))))))
            (field
              (number)
              (number))
            (field
              (table))
            (field
              (number))))))))

================================================================================
Function definitions
================================================================================

return

function() end,

function(...)
  return ...
end,

function(f, ...)
  return f(...)
end

---

(chunk
  (block
    (return_statement
      (expression_list
        (function_definition)
        (function_definition
          (parameter_list
            (vararg_expression))
          (block
            (return_statement
              (expression_list
                (vararg_expression)))))
        (function_definition
          (parameter_list
            (identifier)
            (vararg_expression))
          (block
            (return_statement
              (expression_list
                (function_call
                  (variable
                    (identifier))
                  (argument_list
                    (expression_list
                      (vararg_expression))))))))))))

================================================================================
Variable access
================================================================================

return

_G[1],
math.pi,
math["pi"]

---

(chunk
  (block
    (return_statement
      (expression_list
        (variable
          (variable
            (identifier))
          (number))
        (variable
          (variable
            (identifier))
          (identifier))
        (variable
          (variable
            (identifier))
          (string))))))

================================================================================
Function calls
================================================================================

return

print(),
string.char()

---

(chunk
  (block
    (return_statement
      (expression_list
        (function_call
          (variable
            (identifier))
          (argument_list))
        (function_call
          (variable
            (variable
              (identifier))
            (identifier))
          (argument_list))))))
