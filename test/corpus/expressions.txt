================================================================================
Booleans and nil
================================================================================

return (undefined_var == nil) == true and true or false

---

(chunk
  (return_statement
    (expression_list
      (binary_expression
        left: (binary_expression
          left: (binary_expression
            left: (parenthesized_expression
              (binary_expression
                left: (variable
                  name: (identifier))
                right: (nil)))
            right: (boolean))
          right: (boolean))
        right: (boolean)))))

================================================================================
Numbers
================================================================================

return

3,
-3.,
3.141593,
314.1593e-2,
.3141593E1,

0xff,
-0x.BEBADA,
0x0.1E,
0xA23p-4,
0X1.921FB54442D18P+1

---

(chunk
  (return_statement
    (expression_list
      (number)
      (number)
      (number)
      (number)
      (number)
      (number)
      (number)
      (number)
      (number)
      (number))))

================================================================================
Short strings
================================================================================

return

'',
"",
'a single-quoted (\') string',
"a double-quoted (\") string",
"a string with an undetectable -- comment inside it",
"a string with an undetectable --[[ comment ]] inside it",
"a string with an undetectable --[==[ comment ]==] inside it"

---

(chunk
  (return_statement
    (expression_list
      (string)
      (string)
      (string)
      (string)
      (string)
      (string)
      (string))))

================================================================================
Long strings
================================================================================

return

[[
a string
]],

[=[
a string with an undetectable
-- comment inside it
] =]]=],

[==[
a string with an undetectable
--[[ comment ]] and
[[ string ]] inside it
]= ]]==],

[====[
a string with an undetectable
--[==[ comment ]==] and
[[ string ]] inside it
] ====]]====]

---

(chunk
  (return_statement
    (expression_list
      (string)
      (string)
      (string)
      (string))))

================================================================================
Unary expressions
================================================================================

return not (-#{} < 0)

---

(chunk
  (return_statement
    (expression_list
      (unary_expression
        argument: (parenthesized_expression
          (binary_expression
            left: (unary_expression
              argument: (unary_expression
                argument: (table)))
            right: (number)))))))

================================================================================
Binary expressions
================================================================================

return

(8^2 + 6^2)^.5,
math.pi * (8 / 2),
true and 1 or 0

---

(chunk
  (return_statement
    (expression_list
      (binary_expression
        left: (parenthesized_expression
          (binary_expression
            left: (binary_expression
              left: (number)
              right: (number))
            right: (binary_expression
              left: (number)
              right: (number))))
        right: (number))
      (binary_expression
        left: (variable
          table: (variable
            name: (identifier))
          field: (identifier))
        right: (parenthesized_expression
          (binary_expression
            left: (number)
            right: (number))))
      (binary_expression
        left: (binary_expression
          left: (boolean)
          right: (number))
        right: (number)))))

================================================================================
Tables
================================================================================

return {
  [math.pi] = _VERSION;
  "x",
  "y";
  x = 1,
  string.len(_VERSION),
  [30] = 23;
  {};
  45
}

---

(chunk
  (return_statement
    (expression_list
      (table
        (field_list
          (field
            key: (variable
              table: (variable
                name: (identifier))
              field: (identifier))
            value: (variable
              name: (identifier)))
          (field
            value: (string))
          (field
            value: (string))
          (field
            key: (identifier)
            value: (number))
          (field
            value: (function_call
              (variable
                table: (variable
                  name: (identifier))
                field: (identifier))
              arguments: (argument_list
                (expression_list
                  (variable
                    name: (identifier))))))
          (field
            key: (number)
            value: (number))
          (field
            value: (table))
          (field
            value: (number)))))))

================================================================================
Function definitions
================================================================================

return

function() end,

function(...)
  return ...
end,

function(f, ...)
  return f(...)
end

---

(chunk
  (return_statement
    (expression_list
      (function_definition)
      (function_definition
        parameters: (parameter_list
          (vararg_expression))
        body: (block
          (return_statement
            (expression_list
              (vararg_expression)))))
      (function_definition
        parameters: (parameter_list
          name: (identifier)
          (vararg_expression))
        body: (block
          (return_statement
            (expression_list
              (function_call
                (variable
                  name: (identifier))
                arguments: (argument_list
                  (expression_list
                    (vararg_expression)))))))))))

================================================================================
Variable access
================================================================================

return

_G[1],
math.pi,
math["pi"]

---

(chunk
  (return_statement
    (expression_list
      (variable
        table: (variable
          name: (identifier))
        field: (number))
      (variable
        table: (variable
          name: (identifier))
        field: (identifier))
      (variable
        table: (variable
          name: (identifier))
        field: (string)))))

================================================================================
Function calls
================================================================================

return

print(),
string.char()

---

(chunk
  (return_statement
    (expression_list
      (function_call
        (variable
          name: (identifier))
        arguments: (argument_list))
      (function_call
        (variable
          table: (variable
            name: (identifier))
          field: (identifier))
        arguments: (argument_list)))))
